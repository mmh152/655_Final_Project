- Without any codes, tell me the best way to combine the 2 implementations into 1 implementation that contains both. So, do you think we should 
do them as and, or or, or what? (Such as if the attack was detected by the first and second implementation) or do you recommend something else?


Answer:

For combining the two DDoS detection methods (counter-based threshold and cosine similarity), I recommend using a weighted risk score approach where:

1. Cosine Similarity should have a higher weight (0.6) because:
- It's more sophisticated in detecting attack patterns
- Less prone to false positives
- Better at identifying subtle attack variations
- Considers traffic behavior over time

2. Counter-based threshold should have a lower weight (0.4) because:
- It's a simpler, more direct measure
- Could be triggered by legitimate traffic bursts
- More prone to false positives
- Only considers raw packet counts

The combination should work as follows:
1. Each detection method contributes to a risk score
2. When pattern analysis detects an anomaly -> Add 0.6 to risk
3. When rate threshold is exceeded -> Add 0.4 to risk
4. Total risk score ranges from 0.0 to 1.0
5. If total risk score reaches or exceeds 1.0 -> Node is blacklisted

This means:
- Neither method alone can trigger blacklisting
- Need evidence from both methods
- Provides better protection against false positives
- More robust detection mechanism

The rationale is that while cosine similarity is more reliable (hence higher weight), we still want confirmation from the simpler rate-based method before taking action. This provides a balance between sophisticated detection and concrete evidence of flooding behavior.


---------------------------------------------------------------------


- Now, tell me approximately how to implement the sdn controller for the combination of the 2 implementations.

Answer:


For the SDN controller implementation combining both methods, here are the key components needed:

First, define your detection thresholds and weights:
```c
#define PATTERN_WEIGHT 0.6
#define RATE_WEIGHT 0.4
#define ATTACK_THRESHOLD 1.0
```

You'll need a structure to track per-node statistics:
```c
typedef struct {
    uip_ipaddr_t ipaddr;
    uint32_t packet_count;
    uint32_t traffic_vector[10];    
    uint8_t vector_index;           
    float risk_score;               
    uint32_t last_packet_time;      
    uint32_t rate_window_count;     
} node_stat_t;
```

For pattern analysis, implement cosine similarity:
```c
float compute_similarity(const uint32_t *v1, const uint32_t *v2) {
    float dot_product = 0, norm1 = 0, norm2 = 0;
    for(int i = 0; i < 10; i++) {
        dot_product += v1[i] * v2[i];
        norm1 += v1[i] * v1[i];
        norm2 += v2[i] * v2[i];
    }
    return calculate_final_similarity(dot_product, norm1, norm2);
}
```

The main detection function:
```c
bool detect_attack(node_stat_t *node) {
    float risk_score = 0;
    
    // Pattern Analysis (0.6 weight)
    float similarity = compute_similarity(node->traffic_vector, baseline_vector);
    if(similarity < DETECTION_THRESHOLD) {
        risk_score += PATTERN_WEIGHT;
    }
    
    // Rate Detection (0.4 weight)
    if(check_rate_threshold(node)) {
        risk_score += RATE_WEIGHT;
    }
    
    node->risk_score = risk_score;
    return (risk_score >= ATTACK_THRESHOLD);
}
```

The rate checking function:
```c
bool check_rate_threshold(node_stat_t *node) {
    uint32_t current_time = clock_seconds();
    
    if(current_time == node->last_packet_time) {
        node->rate_window_count++;
        if(node->rate_window_count > RATE_LIMIT_PACKETS) {
            return true;
        }
    } else {
        node->rate_window_count = 1;
        node->last_packet_time = current_time;
    }
    return false;
}
```

Finally, in your packet processing:
```c
void process_packet(const uip_ipaddr_t *sender_addr) {
    node_stat_t *node = get_node_stats(sender_addr);
    
    if(detect_attack(node)) {
        blacklist_node(sender_addr);
    } else {
        process_normal_packet();
    }
}
```


---------------------------------------------------------------------


- Make me a python script that gives us 2 metrics: Accuracy and F1-score. I will input some of the logs down below:

Answer:

import re

def analyze_log(log_path):
    # Initialize counters
    true_positives = 0
    false_positives = 0
    true_negatives = 0
    false_negatives = 0
    
    # Track nodes and their status
    attackers = set()
    normal_nodes = set()
    blacklisted_nodes = set()
    
    with open(log_path, 'r') as f:
        lines = f.readlines()
        
    # First pass - identify node types
    for line in lines:
        if '[INFO: Attack    ]' in line:
            node_id = re.search(r'ID:(\d+)', line).group(1)
            attackers.add(node_id)
        elif '[INFO: Normal    ]' in line and 'Sending request' in line:
            node_id = re.search(r'ID:(\d+)', line).group(1)
            normal_nodes.add(node_id)
            
    # Second pass - count detection results
    for line in lines:
        if 'Node blacklisted:' in line:
            addr = re.search(r'Node blacklisted: ([\w:]+)', line).group(1)
            # Find corresponding node ID
            for prev_line in reversed(lines[:lines.index(line)]):
                if addr in prev_line and 'ID:' in prev_line:
                    node_id = re.search(r'ID:(\d+)', prev_line).group(1)
                    blacklisted_nodes.add(node_id)
                    break

    # Calculate metrics
    for node in attackers:
        if node in blacklisted_nodes:
            true_positives += 1
        else:
            false_negatives += 1
            
    for node in normal_nodes:
        if node in blacklisted_nodes:
            false_positives += 1
        else:
            true_negatives += 1
            
    # Calculate final metrics
    total = true_positives + false_positives + true_negatives + false_negatives
    accuracy = (true_positives + true_negatives) / total * 100 if total > 0 else 0
    
    fp_rate = (false_positives / (false_positives + true_negatives) * 100 
               if (false_positives + true_negatives) > 0 else 0)
    
    precision = true_positives / (true_positives + false_positives) if (true_positives + false_positives) > 0 else 0
    recall = true_positives / (true_positives + false_negatives) if (true_positives + false_negatives) > 0 else 0
    f1_score = 2 * (precision * recall) / (precision + recall) * 100 if (precision + recall) > 0 else 0
    
    # Print results in the requested format
    print("DDoS Detection Metrics:")
    print(f"Accuracy: {accuracy:.2f}%")
    print(f"False Positive Rate: {fp_rate:.2f}%")
    print(f"F1-Score: {f1_score:.2f}%")
    print("Detailed Statistics:")
    print(f"True Positives: {true_positives}")
    print(f"False Positives: {false_positives}")
    print(f"True Negatives: {true_negatives}")
    print(f"False Negatives: {false_negatives}")

if __name__ == "__main__":
    log_file = "paste.txt"  # Your log file name
    analyze_log(log_file)




